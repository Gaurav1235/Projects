public class Order_Team {
	bool validate(Address a) {
		return Factory.getInstance().getValidator(a.country).validate(a);	
	}
}	

public class Factory {

	static Factory f;
  static map<String,FactoryValidators> ctov;
	private Factory() {
		ctov.put("US",new USval());
		ctov.put("IN",new INval());
	}
	public static Factory getInstance() {
		if(f==NULL) {
			f = new Factory(); 
		}
		return f;
	}
	public FactoryValidator getValidator(String C) {
		if(ctov.containsKey(C)) {
			return ctov.get(C);
		}
		else {
			throw an exception("Country Code Not Found");
		}
	}
	
}
Interface FactoryValidators{
    public static bool validate(Address a);
}
public class INval implements FactoryValidators{
    // code to validate indian addresses
    public static bool Validate(Address a) {
    	return ( ZipValid.validate(a.zipcode) && CountryValid.validate(a.country)&& CityValid.validate(a.city) );
    }
}
public class USval implements FactoryValidators{
    // code to validate us addresses
}
class ZipValid {
	
	public static bool validate(String zip) {
		Set<String> s=RI.RIinstance().zipcodes;
		//check
		//return 1/0
	}
	
}
class RI {
	static Set<String> zipcodes;
	static RI r;
	private RI() {
		//create a connection with db
		//db query -> close the connection 
		//initialize the list //this.zipcodes= fetch from db
	}
	public static RI RIinstance() {
		if(r==NULL)
			RI r=new RI();
		return r;
	}
	
}
